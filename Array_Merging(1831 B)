#include <bits/stdc++.h>
using namespace std;
//#define int long long

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0); cout.tie(0);

    int t; cin>>t;
    while(t--){
        int n; cin>>n;

        vector<int> a(n),b(n);
        unordered_map<int,int> maxLenA,maxLenB;

        for(int i=0;i<n;++i){
            cin>>a[i];
        }

        for(int i = 0;i<n;++i){
            cin>>b[i];
        }

        //Calcultaing maximum subarray length for a
        int currentLen = 1;
        for(int i=1;i<n;++i){
            if(a[i] == a[i-1]){
                currentLen++;
            }
            else{
                maxLenA[a[i-1]] = max(maxLenA[a[i-1]],currentLen);
                currentLen = 1;
            }
        }

        maxLenA[a[n-1]] =max(maxLenA[a[n-1]],currLen);  //Update for last segment.

        //Calcultaing maximum subarray length for b
        int currentLen = 1;
        for(int i=1;i<n;++i){
            if(b[i] == b[i-1]){
                currentLen++;
            }
            else{
                maxLenB[b[i-1]] = max(maxLenB[b[i-1]],currentLen);
                currentLen = 1;
            }
        }

        maxLenB[b[n-1]] =max(maxLenB[b[n-1]],currLen);  //Update for last segment.

        int maxLen = 0;
        for(int i=1;i<=2*n;++i){
            maxLen = max(maxLen,maxLenA[i],maxLenB[i]);
        }

        cout<<maxLen<<"\n";
    }
}

